from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes



TOKEN: Final = '7256893867:AAGG9V3uNInCxAXjcLNzjnkXjDpxXJZkAM0'
BOT_USERNAME: Final = '@csyazd_bot'



# Define a handler for the /start command
def handle_start(message):
    bot.reply_to(message, "Welcome! Please provide your information.")


def handle_text(message):


    # Here, you can collect user information and store it (e.g., in a database)


    

    # You can customize this part based on your course sign-up process
    # For example, ask for email, phone number, etc.
    # Then store this information in your database

    bot.reply_to(message, "")




async def sign_in_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    user_username = message.from_user.username


    await update.message.reply_text('Hello there, Welcome to Crypto Bot.\n What do you wanna do?\
    1. Encrypt Text into an Image\
    2. Decrypte an Image and reach to a Text\
    3. Do nothing, Thanks for nothing!')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('There is Noting we can Do!!')



def handle_response(text: str) -> str:




async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    text: str = update.message.text

    print(f'User ({update.message.chat.id}) in {message_type}: "{text}"')

    if message_type == 'group':
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, '').strip()
            response: str = handle_response(new_text)

        else:
            return
    else:
        response: str = handle_response(text)

    print('BOT:', 'response')
    await update.message.reply_text(response)


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')






if __name__ == '__main__':
    print('BOT Starts ...')
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('enc', enc_command))
    app.add_handler(CommandHandler('dec', dec_command))

    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    app.add_error_handler(error)

    print('BOT Polling ...')
    app.run_polling(poll_interval=5)
